/*
 * generated by Xtext 2.16.0
 */
package de.fhdo.lemma.data.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DataDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cComplexTypeImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cComplexTypeImportsComplexTypeImportParserRuleCall_0_0 = (RuleCall)cComplexTypeImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVersionsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVersionsVersionParserRuleCall_1_0_0 = (RuleCall)cVersionsAssignment_1_0.eContents().get(0);
		private final Assignment cContextsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_1_1_0 = (RuleCall)cContextsAssignment_1_1.eContents().get(0);
		private final Assignment cComplexTypesAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cComplexTypesComplexTypeParserRuleCall_1_2_0 = (RuleCall)cComplexTypesAssignment_1_2.eContents().get(0);
		
		//DataModel:
		//	complexTypeImports+=ComplexTypeImport* (versions+=Version+ | contexts+=Context+ | complexTypes+=ComplexType+);
		@Override public ParserRule getRule() { return rule; }
		
		//complexTypeImports+=ComplexTypeImport* (versions+=Version+ | contexts+=Context+ | complexTypes+=ComplexType+)
		public Group getGroup() { return cGroup; }
		
		//complexTypeImports+=ComplexTypeImport*
		public Assignment getComplexTypeImportsAssignment_0() { return cComplexTypeImportsAssignment_0; }
		
		//ComplexTypeImport
		public RuleCall getComplexTypeImportsComplexTypeImportParserRuleCall_0_0() { return cComplexTypeImportsComplexTypeImportParserRuleCall_0_0; }
		
		//versions+=Version+ | contexts+=Context+ | complexTypes+=ComplexType+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//versions+=Version+
		public Assignment getVersionsAssignment_1_0() { return cVersionsAssignment_1_0; }
		
		//Version
		public RuleCall getVersionsVersionParserRuleCall_1_0_0() { return cVersionsVersionParserRuleCall_1_0_0; }
		
		//contexts+=Context+
		public Assignment getContextsAssignment_1_1() { return cContextsAssignment_1_1; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_1_1_0() { return cContextsContextParserRuleCall_1_1_0; }
		
		//complexTypes+=ComplexType+
		public Assignment getComplexTypesAssignment_1_2() { return cComplexTypesAssignment_1_2; }
		
		//ComplexType
		public RuleCall getComplexTypesComplexTypeParserRuleCall_1_2_0() { return cComplexTypesComplexTypeParserRuleCall_1_2_0; }
	}
	public class ComplexTypeImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.ComplexTypeImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDatatypesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportURIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportURISTRINGTerminalRuleCall_3_0 = (RuleCall)cImportURIAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		///* For debugging purposes to test the type checker. May be safely removed in the future. */ /*AssignTest:
		//    (target=PossiblyImportedComplexType)
		//    '='
		//    (source=PossiblyImportedComplexType)
		//;*/ ComplexTypeImport:
		//	'import' 'datatypes' 'from' importURI=STRING 'as' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' 'datatypes' 'from' importURI=STRING 'as' name=ID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//'datatypes'
		public Keyword getDatatypesKeyword_1() { return cDatatypesKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_3() { return cImportURIAssignment_3; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_3_0() { return cImportURISTRINGTerminalRuleCall_3_0; }
		
		//'as'
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
	}
	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVersionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cComplexTypesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cComplexTypesComplexTypeParserRuleCall_3_0_0 = (RuleCall)cComplexTypesAssignment_3_0.eContents().get(0);
		private final Assignment cContextsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_3_1_0 = (RuleCall)cContextsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Version:
		//	'version' name=ID '{' (complexTypes+=ComplexType+ | contexts+=Context+)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'version' name=ID '{' (complexTypes+=ComplexType+ | contexts+=Context+)? '}'
		public Group getGroup() { return cGroup; }
		
		//'version'
		public Keyword getVersionKeyword_0() { return cVersionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(complexTypes+=ComplexType+ | contexts+=Context+)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//complexTypes+=ComplexType+
		public Assignment getComplexTypesAssignment_3_0() { return cComplexTypesAssignment_3_0; }
		
		//ComplexType
		public RuleCall getComplexTypesComplexTypeParserRuleCall_3_0_0() { return cComplexTypesComplexTypeParserRuleCall_3_0_0; }
		
		//contexts+=Context+
		public Assignment getContextsAssignment_3_1() { return cContextsAssignment_3_1; }
		
		//Context
		public RuleCall getContextsContextParserRuleCall_3_1_0() { return cContextsContextParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComplexTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComplexTypesComplexTypeParserRuleCall_3_0 = (RuleCall)cComplexTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Context:
		//	'context' name=ID '{'
		//	complexTypes+=ComplexType+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'context' name=ID '{' complexTypes+=ComplexType+ '}'
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//complexTypes+=ComplexType+
		public Assignment getComplexTypesAssignment_3() { return cComplexTypesAssignment_3; }
		
		//ComplexType
		public RuleCall getComplexTypesComplexTypeParserRuleCall_3_0() { return cComplexTypesComplexTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.ComplexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataStructureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ComplexType:
		//	DataStructure | ListType | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//DataStructure | ListType | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataStructure
		public RuleCall getDataStructureParserRuleCall_0() { return cDataStructureParserRuleCall_0; }
		
		//ListType
		public RuleCall getListTypeParserRuleCall_1() { return cListTypeParserRuleCall_1; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
	}
	public class DataStructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.DataStructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperDataStructureCrossReference_2_1_0 = (CrossReference)cSuperAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperDataStructureQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperDataStructureCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cDataFieldsAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_4_0_0_0 = (RuleCall)cDataFieldsAssignment_4_0_0.eContents().get(0);
		private final Group cGroup_4_0_1 = (Group)cGroup_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_4_0_1_0 = (Keyword)cGroup_4_0_1.eContents().get(0);
		private final Assignment cDataFieldsAssignment_4_0_1_1 = (Assignment)cGroup_4_0_1.eContents().get(1);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_4_0_1_1_0 = (RuleCall)cDataFieldsAssignment_4_0_1_1.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cOperationsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cOperationsDataOperationParserRuleCall_4_1_0_0 = (RuleCall)cOperationsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cOperationsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cOperationsDataOperationParserRuleCall_4_1_1_1_0 = (RuleCall)cOperationsAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cAlternatives_4.eContents().get(2);
		private final Assignment cDataFieldsAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_4_2_0_0 = (RuleCall)cDataFieldsAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cDataFieldsAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_4_2_1_1_0 = (RuleCall)cDataFieldsAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_4_2_2 = (Keyword)cGroup_4_2.eContents().get(2);
		private final Assignment cOperationsAssignment_4_2_3 = (Assignment)cGroup_4_2.eContents().get(3);
		private final RuleCall cOperationsDataOperationParserRuleCall_4_2_3_0 = (RuleCall)cOperationsAssignment_4_2_3.eContents().get(0);
		private final Group cGroup_4_2_4 = (Group)cGroup_4_2.eContents().get(4);
		private final Keyword cCommaKeyword_4_2_4_0 = (Keyword)cGroup_4_2_4.eContents().get(0);
		private final Assignment cOperationsAssignment_4_2_4_1 = (Assignment)cGroup_4_2_4.eContents().get(1);
		private final RuleCall cOperationsDataOperationParserRuleCall_4_2_4_1_0 = (RuleCall)cOperationsAssignment_4_2_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DataStructure:
		//	'structure' name=ID ('extends' super=[DataStructure|QualifiedName])? '{' (dataFields+=DataField (','
		//	dataFields+=DataField)*
		//	| operations+=DataOperation (',' operations+=DataOperation)*
		//	| dataFields+=DataField (',' dataFields+=DataField)*
		//	','
		//	operations+=DataOperation (',' operations+=DataOperation)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'structure' name=ID ('extends' super=[DataStructure|QualifiedName])? '{' (dataFields+=DataField (','
		//dataFields+=DataField)* | operations+=DataOperation (',' operations+=DataOperation)* | dataFields+=DataField (','
		//dataFields+=DataField)* ',' operations+=DataOperation (',' operations+=DataOperation)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//'structure'
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' super=[DataStructure|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//super=[DataStructure|QualifiedName]
		public Assignment getSuperAssignment_2_1() { return cSuperAssignment_2_1; }
		
		//[DataStructure|QualifiedName]
		public CrossReference getSuperDataStructureCrossReference_2_1_0() { return cSuperDataStructureCrossReference_2_1_0; }
		
		//QualifiedName
		public RuleCall getSuperDataStructureQualifiedNameParserRuleCall_2_1_0_1() { return cSuperDataStructureQualifiedNameParserRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(dataFields+=DataField (',' dataFields+=DataField)* | operations+=DataOperation (',' operations+=DataOperation)* |
		//dataFields+=DataField (',' dataFields+=DataField)* ',' operations+=DataOperation (',' operations+=DataOperation)*)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//dataFields+=DataField (',' dataFields+=DataField)*
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_4_0_0() { return cDataFieldsAssignment_4_0_0; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_4_0_0_0() { return cDataFieldsDataFieldParserRuleCall_4_0_0_0; }
		
		//(',' dataFields+=DataField)*
		public Group getGroup_4_0_1() { return cGroup_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_4_0_1_0() { return cCommaKeyword_4_0_1_0; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_4_0_1_1() { return cDataFieldsAssignment_4_0_1_1; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_4_0_1_1_0() { return cDataFieldsDataFieldParserRuleCall_4_0_1_1_0; }
		
		//operations+=DataOperation (',' operations+=DataOperation)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//operations+=DataOperation
		public Assignment getOperationsAssignment_4_1_0() { return cOperationsAssignment_4_1_0; }
		
		//DataOperation
		public RuleCall getOperationsDataOperationParserRuleCall_4_1_0_0() { return cOperationsDataOperationParserRuleCall_4_1_0_0; }
		
		//(',' operations+=DataOperation)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//operations+=DataOperation
		public Assignment getOperationsAssignment_4_1_1_1() { return cOperationsAssignment_4_1_1_1; }
		
		//DataOperation
		public RuleCall getOperationsDataOperationParserRuleCall_4_1_1_1_0() { return cOperationsDataOperationParserRuleCall_4_1_1_1_0; }
		
		//dataFields+=DataField (',' dataFields+=DataField)* ',' operations+=DataOperation (',' operations+=DataOperation)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_4_2_0() { return cDataFieldsAssignment_4_2_0; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_4_2_0_0() { return cDataFieldsDataFieldParserRuleCall_4_2_0_0; }
		
		//(',' dataFields+=DataField)*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//','
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_4_2_1_1() { return cDataFieldsAssignment_4_2_1_1; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_4_2_1_1_0() { return cDataFieldsDataFieldParserRuleCall_4_2_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_4_2_2() { return cCommaKeyword_4_2_2; }
		
		//operations+=DataOperation
		public Assignment getOperationsAssignment_4_2_3() { return cOperationsAssignment_4_2_3; }
		
		//DataOperation
		public RuleCall getOperationsDataOperationParserRuleCall_4_2_3_0() { return cOperationsDataOperationParserRuleCall_4_2_3_0; }
		
		//(',' operations+=DataOperation)*
		public Group getGroup_4_2_4() { return cGroup_4_2_4; }
		
		//','
		public Keyword getCommaKeyword_4_2_4_0() { return cCommaKeyword_4_2_4_0; }
		
		//operations+=DataOperation
		public Assignment getOperationsAssignment_4_2_4_1() { return cOperationsAssignment_4_2_4_1; }
		
		//DataOperation
		public RuleCall getOperationsDataOperationParserRuleCall_4_2_4_1_0() { return cOperationsDataOperationParserRuleCall_4_2_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.ListType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cListKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cDataFieldsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_0_3_0 = (RuleCall)cDataFieldsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cDataFieldsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cDataFieldsDataFieldParserRuleCall_0_4_1_0 = (RuleCall)cDataFieldsAssignment_0_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cListKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPrimitiveTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPrimitiveTypePrimitiveTypeParserRuleCall_1_3_0 = (RuleCall)cPrimitiveTypeAssignment_1_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ListType:
		//	'list' name=ID '{'
		//	dataFields+=DataField (',' dataFields+=DataField)*
		//	'}'
		//	|
		//	'list' name=ID '{'
		//	primitiveType=PrimitiveType
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'list' name=ID '{' dataFields+=DataField (',' dataFields+=DataField)* '}' | 'list' name=ID '{'
		//primitiveType=PrimitiveType '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'list' name=ID '{' dataFields+=DataField (',' dataFields+=DataField)* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'list'
		public Keyword getListKeyword_0_0() { return cListKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_0_3() { return cDataFieldsAssignment_0_3; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_0_3_0() { return cDataFieldsDataFieldParserRuleCall_0_3_0; }
		
		//(',' dataFields+=DataField)*
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }
		
		//dataFields+=DataField
		public Assignment getDataFieldsAssignment_0_4_1() { return cDataFieldsAssignment_0_4_1; }
		
		//DataField
		public RuleCall getDataFieldsDataFieldParserRuleCall_0_4_1_0() { return cDataFieldsDataFieldParserRuleCall_0_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }
		
		//'list' name=ID '{' primitiveType=PrimitiveType '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'list'
		public Keyword getListKeyword_1_0() { return cListKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_1_3() { return cPrimitiveTypeAssignment_1_3; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeParserRuleCall_1_3_0() { return cPrimitiveTypePrimitiveTypeParserRuleCall_1_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}
	public class DataFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.DataField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHiddenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHiddenHideKeyword_0_0 = (Keyword)cHiddenAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cPrimitiveTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0 = (RuleCall)cPrimitiveTypeAssignment_1_0.eContents().get(0);
		private final Assignment cComplexTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cComplexTypePossiblyImportedComplexTypeParserRuleCall_1_1_0 = (RuleCall)cComplexTypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeaturesFieldFeatureEnumRuleCall_3_1_0 = (RuleCall)cFeaturesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFeaturesFieldFeatureEnumRuleCall_3_2_1_0 = (RuleCall)cFeaturesAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//DataField:
		//	^hidden?='hide'? (primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType)?
		//	name=ID ('<'
		//	features+=FieldFeature (',' features+=FieldFeature)*
		//	'>')?;
		@Override public ParserRule getRule() { return rule; }
		
		//^hidden?='hide'? (primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType)? name=ID ('<'
		//features+=FieldFeature (',' features+=FieldFeature)* '>')?
		public Group getGroup() { return cGroup; }
		
		//^hidden?='hide'?
		public Assignment getHiddenAssignment_0() { return cHiddenAssignment_0; }
		
		//'hide'
		public Keyword getHiddenHideKeyword_0_0() { return cHiddenHideKeyword_0_0; }
		
		//(primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_1_0() { return cPrimitiveTypeAssignment_1_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0() { return cPrimitiveTypePrimitiveTypeParserRuleCall_1_0_0; }
		
		//complexType=PossiblyImportedComplexType
		public Assignment getComplexTypeAssignment_1_1() { return cComplexTypeAssignment_1_1; }
		
		//PossiblyImportedComplexType
		public RuleCall getComplexTypePossiblyImportedComplexTypeParserRuleCall_1_1_0() { return cComplexTypePossiblyImportedComplexTypeParserRuleCall_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('<' features+=FieldFeature (',' features+=FieldFeature)* '>')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }
		
		//features+=FieldFeature
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }
		
		//FieldFeature
		public RuleCall getFeaturesFieldFeatureEnumRuleCall_3_1_0() { return cFeaturesFieldFeatureEnumRuleCall_3_1_0; }
		
		//(',' features+=FieldFeature)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//features+=FieldFeature
		public Assignment getFeaturesAssignment_3_2_1() { return cFeaturesAssignment_3_2_1; }
		
		//FieldFeature
		public RuleCall getFeaturesFieldFeatureEnumRuleCall_3_2_1_0() { return cFeaturesFieldFeatureEnumRuleCall_3_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsEnumerationFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFieldsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFieldsEnumerationFieldParserRuleCall_4_1_0 = (RuleCall)cFieldsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration:
		//	'enum' name=ID '{'
		//	fields+=EnumerationField (',' fields+=EnumerationField)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=ID '{' fields+=EnumerationField (',' fields+=EnumerationField)* '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=EnumerationField
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//EnumerationField
		public RuleCall getFieldsEnumerationFieldParserRuleCall_3_0() { return cFieldsEnumerationFieldParserRuleCall_3_0; }
		
		//(',' fields+=EnumerationField)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//fields+=EnumerationField
		public Assignment getFieldsAssignment_4_1() { return cFieldsAssignment_4_1; }
		
		//EnumerationField
		public RuleCall getFieldsEnumerationFieldParserRuleCall_4_1_0() { return cFieldsEnumerationFieldParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumerationFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.EnumerationField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInitializationValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInitializationValuePrimitiveValueParserRuleCall_1_1_0 = (RuleCall)cInitializationValueAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//EnumerationField:
		//	name=ID ('(' initializationValue=PrimitiveValue ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('(' initializationValue=PrimitiveValue ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('(' initializationValue=PrimitiveValue ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//initializationValue=PrimitiveValue
		public Assignment getInitializationValueAssignment_1_1() { return cInitializationValueAssignment_1_1; }
		
		//PrimitiveValue
		public RuleCall getInitializationValuePrimitiveValueParserRuleCall_1_1_0() { return cInitializationValuePrimitiveValueParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class DataOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.DataOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHiddenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHiddenHideKeyword_0_0 = (Keyword)cHiddenAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cHasNoReturnTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cHasNoReturnTypeProcedureKeyword_1_0_0 = (Keyword)cHasNoReturnTypeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFunctionKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Assignment cPrimitiveReturnTypeAssignment_1_1_1_0 = (Assignment)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cPrimitiveReturnTypePrimitiveTypeParserRuleCall_1_1_1_0_0 = (RuleCall)cPrimitiveReturnTypeAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cComplexReturnTypeAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cComplexReturnTypePossiblyImportedComplexTypeParserRuleCall_1_1_1_1_0 = (RuleCall)cComplexReturnTypeAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersDataOperationParameterParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParametersDataOperationParameterParserRuleCall_3_2_1_0 = (RuleCall)cParametersAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//DataOperation:
		//	^hidden?='hide'? (hasNoReturnType?='procedure' |
		//	'function' (primitiveReturnType=PrimitiveType | complexReturnType=PossiblyImportedComplexType)?) name=ID ('('
		//	parameters+=DataOperationParameter? (',' parameters+=DataOperationParameter)* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//^hidden?='hide'? (hasNoReturnType?='procedure' | 'function' (primitiveReturnType=PrimitiveType |
		//complexReturnType=PossiblyImportedComplexType)?) name=ID ('(' parameters+=DataOperationParameter? (','
		//parameters+=DataOperationParameter)* ')')?
		public Group getGroup() { return cGroup; }
		
		//^hidden?='hide'?
		public Assignment getHiddenAssignment_0() { return cHiddenAssignment_0; }
		
		//'hide'
		public Keyword getHiddenHideKeyword_0_0() { return cHiddenHideKeyword_0_0; }
		
		//hasNoReturnType?='procedure' | 'function' (primitiveReturnType=PrimitiveType |
		//complexReturnType=PossiblyImportedComplexType)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//hasNoReturnType?='procedure'
		public Assignment getHasNoReturnTypeAssignment_1_0() { return cHasNoReturnTypeAssignment_1_0; }
		
		//'procedure'
		public Keyword getHasNoReturnTypeProcedureKeyword_1_0_0() { return cHasNoReturnTypeProcedureKeyword_1_0_0; }
		
		//'function' (primitiveReturnType=PrimitiveType | complexReturnType=PossiblyImportedComplexType)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'function'
		public Keyword getFunctionKeyword_1_1_0() { return cFunctionKeyword_1_1_0; }
		
		//(primitiveReturnType=PrimitiveType | complexReturnType=PossiblyImportedComplexType)?
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//primitiveReturnType=PrimitiveType
		public Assignment getPrimitiveReturnTypeAssignment_1_1_1_0() { return cPrimitiveReturnTypeAssignment_1_1_1_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveReturnTypePrimitiveTypeParserRuleCall_1_1_1_0_0() { return cPrimitiveReturnTypePrimitiveTypeParserRuleCall_1_1_1_0_0; }
		
		//complexReturnType=PossiblyImportedComplexType
		public Assignment getComplexReturnTypeAssignment_1_1_1_1() { return cComplexReturnTypeAssignment_1_1_1_1; }
		
		//PossiblyImportedComplexType
		public RuleCall getComplexReturnTypePossiblyImportedComplexTypeParserRuleCall_1_1_1_1_0() { return cComplexReturnTypePossiblyImportedComplexTypeParserRuleCall_1_1_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' parameters+=DataOperationParameter? (',' parameters+=DataOperationParameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//parameters+=DataOperationParameter?
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }
		
		//DataOperationParameter
		public RuleCall getParametersDataOperationParameterParserRuleCall_3_1_0() { return cParametersDataOperationParameterParserRuleCall_3_1_0; }
		
		//(',' parameters+=DataOperationParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//parameters+=DataOperationParameter
		public Assignment getParametersAssignment_3_2_1() { return cParametersAssignment_3_2_1; }
		
		//DataOperationParameter
		public RuleCall getParametersDataOperationParameterParserRuleCall_3_2_1_0() { return cParametersDataOperationParameterParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class DataOperationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.DataOperationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPrimitiveTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPrimitiveTypePrimitiveTypeParserRuleCall_0_0_0 = (RuleCall)cPrimitiveTypeAssignment_0_0.eContents().get(0);
		private final Assignment cComplexTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cComplexTypePossiblyImportedComplexTypeParserRuleCall_0_1_0 = (RuleCall)cComplexTypeAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//DataOperationParameter:
		//	(primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType) name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType) name=ID
		public Group getGroup() { return cGroup; }
		
		//primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//primitiveType=PrimitiveType
		public Assignment getPrimitiveTypeAssignment_0_0() { return cPrimitiveTypeAssignment_0_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypePrimitiveTypeParserRuleCall_0_0_0() { return cPrimitiveTypePrimitiveTypeParserRuleCall_0_0_0; }
		
		//complexType=PossiblyImportedComplexType
		public Assignment getComplexTypeAssignment_0_1() { return cComplexTypeAssignment_0_1; }
		
		//PossiblyImportedComplexType
		public RuleCall getComplexTypePossiblyImportedComplexTypeParserRuleCall_0_1_0() { return cComplexTypePossiblyImportedComplexTypeParserRuleCall_0_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class PrimitiveValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.PrimitiveValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumericValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumericValueBIG_DECIMALTerminalRuleCall_0_0 = (RuleCall)cNumericValueAssignment_0.eContents().get(0);
		private final Assignment cBooleanValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueBOOLEANTerminalRuleCall_1_0 = (RuleCall)cBooleanValueAssignment_1.eContents().get(0);
		private final Assignment cStringValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringValueAssignment_2.eContents().get(0);
		
		//PrimitiveValue:
		//	numericValue=BIG_DECIMAL | booleanValue=BOOLEAN | stringValue=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//numericValue=BIG_DECIMAL | booleanValue=BOOLEAN | stringValue=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//numericValue=BIG_DECIMAL
		public Assignment getNumericValueAssignment_0() { return cNumericValueAssignment_0; }
		
		//BIG_DECIMAL
		public RuleCall getNumericValueBIG_DECIMALTerminalRuleCall_0_0() { return cNumericValueBIG_DECIMALTerminalRuleCall_0_0; }
		
		//booleanValue=BOOLEAN
		public Assignment getBooleanValueAssignment_1() { return cBooleanValueAssignment_1; }
		
		//BOOLEAN
		public RuleCall getBooleanValueBOOLEANTerminalRuleCall_1_0() { return cBooleanValueBOOLEANTerminalRuleCall_1_0; }
		
		//stringValue=STRING
		public Assignment getStringValueAssignment_2() { return cStringValueAssignment_2; }
		
		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_2_0() { return cStringValueSTRINGTerminalRuleCall_2_0; }
	}
	public class PossiblyImportedComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.PossiblyImportedComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cImportAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cImportComplexTypeImportCrossReference_0_0_0 = (CrossReference)cImportAssignment_0_0.eContents().get(0);
		private final RuleCall cImportComplexTypeImportIDTerminalRuleCall_0_0_0_1 = (RuleCall)cImportComplexTypeImportCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cComplexTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComplexTypeComplexTypeCrossReference_1_0 = (CrossReference)cComplexTypeAssignment_1.eContents().get(0);
		private final RuleCall cComplexTypeComplexTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cComplexTypeComplexTypeCrossReference_1_0.eContents().get(1);
		
		//PossiblyImportedComplexType:
		//	(^import=[ComplexTypeImport] '::')? complexType=[ComplexType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//(^import=[ComplexTypeImport] '::')? complexType=[ComplexType|QualifiedName]
		public Group getGroup() { return cGroup; }
		
		//(^import=[ComplexTypeImport] '::')?
		public Group getGroup_0() { return cGroup_0; }
		
		//^import=[ComplexTypeImport]
		public Assignment getImportAssignment_0_0() { return cImportAssignment_0_0; }
		
		//[ComplexTypeImport]
		public CrossReference getImportComplexTypeImportCrossReference_0_0_0() { return cImportComplexTypeImportCrossReference_0_0_0; }
		
		//ID
		public RuleCall getImportComplexTypeImportIDTerminalRuleCall_0_0_0_1() { return cImportComplexTypeImportIDTerminalRuleCall_0_0_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//complexType=[ComplexType|QualifiedName]
		public Assignment getComplexTypeAssignment_1() { return cComplexTypeAssignment_1; }
		
		//[ComplexType|QualifiedName]
		public CrossReference getComplexTypeComplexTypeCrossReference_1_0() { return cComplexTypeComplexTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getComplexTypeComplexTypeQualifiedNameParserRuleCall_1_0_1() { return cComplexTypeComplexTypeQualifiedNameParserRuleCall_1_0_1; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimitiveBooleanAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cBooleanKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrimitiveByteAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cByteKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrimitiveCharacterAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCharKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPrimitiveDateAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cDateKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPrimitiveDoubleAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDoubleKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPrimitiveFloatAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cFloatKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cPrimitiveIntegerAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cIntKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cPrimitiveLongAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cLongKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cPrimitiveShortAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cShortKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cPrimitiveStringAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cStringKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		
		//PrimitiveType:
		//	{PrimitiveBoolean} 'boolean' | {PrimitiveByte} 'byte' | {PrimitiveCharacter} 'char' | {PrimitiveDate} 'date' |
		//	{PrimitiveDouble} 'double' | {PrimitiveFloat} 'float' | {PrimitiveInteger} 'int' | {PrimitiveLong} 'long' |
		//	{PrimitiveShort} 'short' | {PrimitiveString} 'string';
		@Override public ParserRule getRule() { return rule; }
		
		//{PrimitiveBoolean} 'boolean' | {PrimitiveByte} 'byte' | {PrimitiveCharacter} 'char' | {PrimitiveDate} 'date' |
		//{PrimitiveDouble} 'double' | {PrimitiveFloat} 'float' | {PrimitiveInteger} 'int' | {PrimitiveLong} 'long' |
		//{PrimitiveShort} 'short' | {PrimitiveString} 'string'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PrimitiveBoolean} 'boolean'
		public Group getGroup_0() { return cGroup_0; }
		
		//{PrimitiveBoolean}
		public Action getPrimitiveBooleanAction_0_0() { return cPrimitiveBooleanAction_0_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_0_1() { return cBooleanKeyword_0_1; }
		
		//{PrimitiveByte} 'byte'
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrimitiveByte}
		public Action getPrimitiveByteAction_1_0() { return cPrimitiveByteAction_1_0; }
		
		//'byte'
		public Keyword getByteKeyword_1_1() { return cByteKeyword_1_1; }
		
		//{PrimitiveCharacter} 'char'
		public Group getGroup_2() { return cGroup_2; }
		
		//{PrimitiveCharacter}
		public Action getPrimitiveCharacterAction_2_0() { return cPrimitiveCharacterAction_2_0; }
		
		//'char'
		public Keyword getCharKeyword_2_1() { return cCharKeyword_2_1; }
		
		//{PrimitiveDate} 'date'
		public Group getGroup_3() { return cGroup_3; }
		
		//{PrimitiveDate}
		public Action getPrimitiveDateAction_3_0() { return cPrimitiveDateAction_3_0; }
		
		//'date'
		public Keyword getDateKeyword_3_1() { return cDateKeyword_3_1; }
		
		//{PrimitiveDouble} 'double'
		public Group getGroup_4() { return cGroup_4; }
		
		//{PrimitiveDouble}
		public Action getPrimitiveDoubleAction_4_0() { return cPrimitiveDoubleAction_4_0; }
		
		//'double'
		public Keyword getDoubleKeyword_4_1() { return cDoubleKeyword_4_1; }
		
		//{PrimitiveFloat} 'float'
		public Group getGroup_5() { return cGroup_5; }
		
		//{PrimitiveFloat}
		public Action getPrimitiveFloatAction_5_0() { return cPrimitiveFloatAction_5_0; }
		
		//'float'
		public Keyword getFloatKeyword_5_1() { return cFloatKeyword_5_1; }
		
		//{PrimitiveInteger} 'int'
		public Group getGroup_6() { return cGroup_6; }
		
		//{PrimitiveInteger}
		public Action getPrimitiveIntegerAction_6_0() { return cPrimitiveIntegerAction_6_0; }
		
		//'int'
		public Keyword getIntKeyword_6_1() { return cIntKeyword_6_1; }
		
		//{PrimitiveLong} 'long'
		public Group getGroup_7() { return cGroup_7; }
		
		//{PrimitiveLong}
		public Action getPrimitiveLongAction_7_0() { return cPrimitiveLongAction_7_0; }
		
		//'long'
		public Keyword getLongKeyword_7_1() { return cLongKeyword_7_1; }
		
		//{PrimitiveShort} 'short'
		public Group getGroup_8() { return cGroup_8; }
		
		//{PrimitiveShort}
		public Action getPrimitiveShortAction_8_0() { return cPrimitiveShortAction_8_0; }
		
		//'short'
		public Keyword getShortKeyword_8_1() { return cShortKeyword_8_1; }
		
		//{PrimitiveString} 'string'
		public Group getGroup_9() { return cGroup_9; }
		
		//{PrimitiveString}
		public Action getPrimitiveStringAction_9_0() { return cPrimitiveStringAction_9_0; }
		
		//'string'
		public Keyword getStringKeyword_9_1() { return cStringKeyword_9_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class FieldFeatureElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.FieldFeature");
		private final EnumLiteralDeclaration cDERIVEDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cDERIVEDDerivedKeyword_0 = (Keyword)cDERIVEDEnumLiteralDeclaration.eContents().get(0);
		
		//enum FieldFeature:
		//	DERIVED="derived";
		public EnumRule getRule() { return rule; }
		
		//DERIVED="derived"
		public EnumLiteralDeclaration getDERIVEDEnumLiteralDeclaration() { return cDERIVEDEnumLiteralDeclaration; }
		
		//"derived"
		public Keyword getDERIVEDDerivedKeyword_0() { return cDERIVEDDerivedKeyword_0; }
	}
	
	private final DataModelElements pDataModel;
	private final ComplexTypeImportElements pComplexTypeImport;
	private final VersionElements pVersion;
	private final ContextElements pContext;
	private final ComplexTypeElements pComplexType;
	private final DataStructureElements pDataStructure;
	private final ListTypeElements pListType;
	private final FieldFeatureElements eFieldFeature;
	private final DataFieldElements pDataField;
	private final EnumerationElements pEnumeration;
	private final EnumerationFieldElements pEnumerationField;
	private final DataOperationElements pDataOperation;
	private final DataOperationParameterElements pDataOperationParameter;
	private final PrimitiveValueElements pPrimitiveValue;
	private final PossiblyImportedComplexTypeElements pPossiblyImportedComplexType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tBIG_DECIMAL;
	private final TerminalRule tBOOLEAN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DataDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.pComplexTypeImport = new ComplexTypeImportElements();
		this.pVersion = new VersionElements();
		this.pContext = new ContextElements();
		this.pComplexType = new ComplexTypeElements();
		this.pDataStructure = new DataStructureElements();
		this.pListType = new ListTypeElements();
		this.eFieldFeature = new FieldFeatureElements();
		this.pDataField = new DataFieldElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumerationField = new EnumerationFieldElements();
		this.pDataOperation = new DataOperationElements();
		this.pDataOperationParameter = new DataOperationParameterElements();
		this.pPrimitiveValue = new PrimitiveValueElements();
		this.pPossiblyImportedComplexType = new PossiblyImportedComplexTypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tBIG_DECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.BIG_DECIMAL");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fhdo.lemma.data.DataDsl.BOOLEAN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fhdo.lemma.data.DataDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataModel:
	//	complexTypeImports+=ComplexTypeImport* (versions+=Version+ | contexts+=Context+ | complexTypes+=ComplexType+);
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}
	
	///* For debugging purposes to test the type checker. May be safely removed in the future. */ /*AssignTest:
	//    (target=PossiblyImportedComplexType)
	//    '='
	//    (source=PossiblyImportedComplexType)
	//;*/ ComplexTypeImport:
	//	'import' 'datatypes' 'from' importURI=STRING 'as' name=ID;
	public ComplexTypeImportElements getComplexTypeImportAccess() {
		return pComplexTypeImport;
	}
	
	public ParserRule getComplexTypeImportRule() {
		return getComplexTypeImportAccess().getRule();
	}
	
	//Version:
	//	'version' name=ID '{' (complexTypes+=ComplexType+ | contexts+=Context+)?
	//	'}';
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}
	
	//Context:
	//	'context' name=ID '{'
	//	complexTypes+=ComplexType+
	//	'}';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//ComplexType:
	//	DataStructure | ListType | Enumeration;
	public ComplexTypeElements getComplexTypeAccess() {
		return pComplexType;
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}
	
	//DataStructure:
	//	'structure' name=ID ('extends' super=[DataStructure|QualifiedName])? '{' (dataFields+=DataField (','
	//	dataFields+=DataField)*
	//	| operations+=DataOperation (',' operations+=DataOperation)*
	//	| dataFields+=DataField (',' dataFields+=DataField)*
	//	','
	//	operations+=DataOperation (',' operations+=DataOperation)*)?
	//	'}';
	public DataStructureElements getDataStructureAccess() {
		return pDataStructure;
	}
	
	public ParserRule getDataStructureRule() {
		return getDataStructureAccess().getRule();
	}
	
	//ListType:
	//	'list' name=ID '{'
	//	dataFields+=DataField (',' dataFields+=DataField)*
	//	'}'
	//	|
	//	'list' name=ID '{'
	//	primitiveType=PrimitiveType
	//	'}';
	public ListTypeElements getListTypeAccess() {
		return pListType;
	}
	
	public ParserRule getListTypeRule() {
		return getListTypeAccess().getRule();
	}
	
	//enum FieldFeature:
	//	DERIVED="derived";
	public FieldFeatureElements getFieldFeatureAccess() {
		return eFieldFeature;
	}
	
	public EnumRule getFieldFeatureRule() {
		return getFieldFeatureAccess().getRule();
	}
	
	//DataField:
	//	^hidden?='hide'? (primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType)?
	//	name=ID ('<'
	//	features+=FieldFeature (',' features+=FieldFeature)*
	//	'>')?;
	public DataFieldElements getDataFieldAccess() {
		return pDataField;
	}
	
	public ParserRule getDataFieldRule() {
		return getDataFieldAccess().getRule();
	}
	
	//Enumeration:
	//	'enum' name=ID '{'
	//	fields+=EnumerationField (',' fields+=EnumerationField)*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//EnumerationField:
	//	name=ID ('(' initializationValue=PrimitiveValue ')')?;
	public EnumerationFieldElements getEnumerationFieldAccess() {
		return pEnumerationField;
	}
	
	public ParserRule getEnumerationFieldRule() {
		return getEnumerationFieldAccess().getRule();
	}
	
	//DataOperation:
	//	^hidden?='hide'? (hasNoReturnType?='procedure' |
	//	'function' (primitiveReturnType=PrimitiveType | complexReturnType=PossiblyImportedComplexType)?) name=ID ('('
	//	parameters+=DataOperationParameter? (',' parameters+=DataOperationParameter)* ')')?;
	public DataOperationElements getDataOperationAccess() {
		return pDataOperation;
	}
	
	public ParserRule getDataOperationRule() {
		return getDataOperationAccess().getRule();
	}
	
	//DataOperationParameter:
	//	(primitiveType=PrimitiveType | complexType=PossiblyImportedComplexType) name=ID;
	public DataOperationParameterElements getDataOperationParameterAccess() {
		return pDataOperationParameter;
	}
	
	public ParserRule getDataOperationParameterRule() {
		return getDataOperationParameterAccess().getRule();
	}
	
	//PrimitiveValue:
	//	numericValue=BIG_DECIMAL | booleanValue=BOOLEAN | stringValue=STRING;
	public PrimitiveValueElements getPrimitiveValueAccess() {
		return pPrimitiveValue;
	}
	
	public ParserRule getPrimitiveValueRule() {
		return getPrimitiveValueAccess().getRule();
	}
	
	//PossiblyImportedComplexType:
	//	(^import=[ComplexTypeImport] '::')? complexType=[ComplexType|QualifiedName];
	public PossiblyImportedComplexTypeElements getPossiblyImportedComplexTypeAccess() {
		return pPossiblyImportedComplexType;
	}
	
	public ParserRule getPossiblyImportedComplexTypeRule() {
		return getPossiblyImportedComplexTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//	{PrimitiveBoolean} 'boolean' | {PrimitiveByte} 'byte' | {PrimitiveCharacter} 'char' | {PrimitiveDate} 'date' |
	//	{PrimitiveDouble} 'double' | {PrimitiveFloat} 'float' | {PrimitiveInteger} 'int' | {PrimitiveLong} 'long' |
	//	{PrimitiveShort} 'short' | {PrimitiveString} 'string';
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal BIG_DECIMAL returns ecore::EBigDecimal:
	//	'-'? INT ('.' INT)?;
	public TerminalRule getBIG_DECIMALRule() {
		return tBIG_DECIMAL;
	}
	
	//terminal BOOLEAN returns ecore::EBoolean:
	//	'true' | 'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
