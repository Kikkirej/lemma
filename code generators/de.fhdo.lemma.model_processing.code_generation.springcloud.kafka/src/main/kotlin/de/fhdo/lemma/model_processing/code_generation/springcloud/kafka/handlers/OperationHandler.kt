package de.fhdo.lemma.model_processing.code_generation.springcloud.kafka.handlers

import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration
import com.github.javaparser.ast.body.MethodDeclaration
import de.fhdo.lemma.model_processing.code_generation.java_base.genlets.GenletCodeGenerationHandlerI
import de.fhdo.lemma.model_processing.code_generation.java_base.genlets.GenletCodeGenerationHandlerResult
import de.fhdo.lemma.model_processing.code_generation.java_base.handlers.CodeGenerationHandler
import de.fhdo.lemma.model_processing.code_generation.java_base.hasAspect
import de.fhdo.lemma.service.intermediate.IntermediateOperation

/**
 * Code generation handler for IntermediateOperation instances.
 *
 * @author [Florian Rademacher](mailto:florian.rademacher@fh-dortmund.de)
 */
@CodeGenerationHandler
internal class OperationHandler
    : GenletCodeGenerationHandlerI<IntermediateOperation, MethodDeclaration, ClassOrInterfaceDeclaration> {
    override fun handlesEObjectsOfInstance() = IntermediateOperation::class.java
    override fun generatesNodesOfInstance() = MethodDeclaration::class.java

    /**
     * Execution logic of the handler
     */
    override fun execute(eObject: IntermediateOperation, node: MethodDeclaration, context: ClassOrInterfaceDeclaration?)
        : GenletCodeGenerationHandlerResult<MethodDeclaration>? {
        // If the operation is a Kafka or Avro Participant, it will be removed from the context Java class. That is,
        // because the Java Base Generator generates methods for asynchronous operations. However, for Kafka the methods
        // become event sending or listener callback methods within their own Spring services. Consequently, their
        // counterparts generated by the Java Base Generator are superfluous.
        if (eObject.hasAspect("Kafka.Participant", "Kafka.AvroParticipant"))
            context!!.members.remove(node)
        return null
    }
}