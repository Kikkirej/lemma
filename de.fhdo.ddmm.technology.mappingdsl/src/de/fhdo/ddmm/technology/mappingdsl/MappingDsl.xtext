// automatically generated by Xtext
grammar de.fhdo.ddmm.technology.mappingdsl.MappingDsl with de.fhdo.ddmm.ServiceDsl

import "de.fhdo.ddmm.technology.mapping"
import "de.fhdo.ddmm.service" as service
import "de.fhdo.ddmm.technology" as technology
import "de.fhdo.ddmm.data" as data
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

TechnologyMapping returns TechnologyMapping:
    imports+=Import+
    typeMappings+=ComplexTypeMapping*
    serviceMappings+=MicroserviceMapping+
;

@Override
enum ImportType returns service::ImportType:
    TECHNOLOGY='technology' | MICROSERVICES='microservices'
;

ComplexTypeMapping returns ComplexTypeMapping:
    ('@' 'technology' '(' technologies+=[service::Import] ')')+
    'type' type=ImportedComplexType '{'
        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?

        fieldMappings+=TechnologySpecificFieldMapping*
    '}'
;

ImportedComplexType:
    serviceModelImport=[service::Import] '::'
    dataModelImport=[service::Import] '::'
    type=[data::ComplexType|QualifiedName]
;

MicroserviceMapping returns MicroserviceMapping:
    ('@' 'technology' '(' technologies+=[service::Import] ')')+
    microservice=ImportedMicroservice '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint*
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?

        interfaceMappings+=InterfaceMapping*
        referredOperationMappings+=ReferredOperationMapping*
        operationMappings+=OperationMapping*
    '}'
;

InterfaceMapping returns InterfaceMapping:
    'interface' interface=[service::Interface] '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint+
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?
    '}'
;

OperationMapping returns OperationMapping:
    'operation' operation=[service::Operation|QualifiedName] '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint+
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?

        ('parameters' '{'
            parameterMappings+=(PrimitiveParameterMapping | ComplexParameterMapping)
            (',' parameterMappings+=(PrimitiveParameterMapping | ComplexParameterMapping))*
        '}')?
    '}'
;

ReferredOperationMapping returns ReferredOperationMapping:
    'referred' 'operation' operation=[service::ReferredOperation|QualifiedName] '{'
        ('protocols' '{'
            protocols+=TechnologySpecificProtocolSpecification+
        '}')?

        ('endpoints' '{'
            endpoints+=TechnologySpecificEndpoint+
        '}')?

        ('aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}')?
    '}'
;

PrimitiveParameterMapping returns PrimitiveParameterMapping:
    'primitive' parameter=[service::Parameter]
    (
     ':' technology=[service::Import] '::'
     primitiveType=[technology::TechnologySpecificPrimitiveType|QualifiedName]
    )?
    ('{'
        'aspects' '{'
            aspects+=TechnologySpecificImportedServiceAspect+
        '}'
    '}')?
;

ComplexParameterMapping returns ComplexParameterMapping:
    'complex' parameter=[service::Parameter]
        (
            (
                (
                  ':' technology=[service::Import] '::'
                  technologySpecificComplexType=[data::ComplexType|QualifiedName]
                )?
                ('{'
                    'aspects' '{'
                        aspects+=TechnologySpecificImportedServiceAspect+
                    '}'
                '}')?
            )
            |
            ('->' '{'
                ('aspects' '{'
                    aspects+=TechnologySpecificImportedServiceAspect+
                '}')?

                fieldMappings+=TechnologySpecificFieldMapping
                (',' fieldMappings+=TechnologySpecificFieldMapping)*
            '}')
        )
;

TechnologySpecificFieldMapping returns TechnologySpecificFieldMapping:
    (enumerationField=[data::EnumerationField] |
        (
            dataField=[data::DataField] ':' technology=[service::Import] '::'
            type=[data::Type|QualifiedName]
        )
    )
    (
        '{'
            'aspects' '{'
                aspects+=TechnologySpecificImportedServiceAspect+
            '}'
        '}'
    |
        ';'
    )
;

ImportedMicroservice returns ImportedMicroservice:
    ^import=[service::Import] '::'
    microservice=[service::Microservice|QualifiedNameWithAtLeastOneLevel]
;

TechnologySpecificProtocolSpecification returns TechnologySpecificProtocolSpecification:
    communicationType=CommunicationType ':'
    technologySpecificProtocol=TechnologySpecificProtocol
;

TechnologySpecificProtocol returns TechnologySpecificProtocol:
    technology=[service::Import] '::'
    protocol=[technology::Protocol|QualifiedName]
    ('/' dataFormat=[technology::DataFormat])?
;

TechnologySpecificEndpoint returns TechnologySpecificEndpoint:
    technologySpecificProtocols+=TechnologySpecificProtocol
    (',' technologySpecificProtocols+=TechnologySpecificProtocol)* ':'
    addresses+=STRING (',' addresses+=STRING)* ';'
;

TechnologySpecificImportedServiceAspect returns TechnologySpecificImportedServiceAspect:
    technology=[service::Import] '::' aspect=[technology::ServiceAspect|QualifiedName]
    (
        '('
            (
                singlePropertyValue=PrimitiveValue
                    |
                (values+=PropertyValueAssignment (',' values+=PropertyValueAssignment)*)
            )
        ')'
    |
        ';'
    )
;